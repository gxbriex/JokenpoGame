name: CI/CD - Continuous Integration & Delivery

on:
  push:
    branches: [ master, teste-workflow ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
  IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test Application

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Send Discord notification - Build started
        if: always()
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "Build Iniciado",
                   "description": "Pipeline CI/CD iniciado para o projeto",
                   "color": 3447003,
                   "fields": [
                     {
                       "name": "Branch",
                       "value": "${{ github.ref_name }}",
                       "inline": true
                     },
                     {
                       "name": "Commit",
                       "value": "`${{ github.sha }}`",
                       "inline": true
                     },
                     {
                       "name": "Author",
                       "value": "${{ github.actor }}",
                       "inline": true
                     }
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: dotnet build --no-restore --configuration Release

      # ========== SEÇÃO DE TESTES APRIMORADA ==========
      - name: Run Unit Tests with Coverage
        run: |
          dotnet test --no-build \
            --configuration Release \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --logger "trx;LogFileName=test-results.trx"

      - name: Generate Coverage Report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:"./TestResults/**/coverage.cobertura.xml" \
            -targetdir:"./CoverageReport" \
            -reporttypes:"Html;Cobertura;TextSummary"

      - name: Display Test Coverage Summary
        run: |
          if [ -f "./CoverageReport/Summary.txt" ]; then
            echo "========== RESUMO DE COBERTURA DE CÓDIGO =========="
            cat ./CoverageReport/Summary.txt
            echo "=================================================="
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ./TestResults/**/*.trx
            ./CoverageReport/**/*
          retention-days: 30

      - name: Parse Test Results
        id: test-results
        if: always()
        run: |
          # Extrai informações dos testes
          if [ -f "./TestResults/test-results.trx" ]; then
            TOTAL_TESTS=$(grep -o 'total="[0-9]*"' ./TestResults/test-results.trx | head -1 | cut -d'"' -f2)
            PASSED_TESTS=$(grep -o 'passed="[0-9]*"' ./TestResults/test-results.trx | head -1 | cut -d'"' -f2)
            FAILED_TESTS=$(grep -o 'failed="[0-9]*"' ./TestResults/test-results.trx | head -1 | cut -d'"' -f2)
            
            echo "total_tests=${TOTAL_TESTS:-0}" >> $GITHUB_OUTPUT
            echo "passed_tests=${PASSED_TESTS:-0}" >> $GITHUB_OUTPUT
            echo "failed_tests=${FAILED_TESTS:-0}" >> $GITHUB_OUTPUT
          else
            echo "total_tests=0" >> $GITHUB_OUTPUT
            echo "passed_tests=0" >> $GITHUB_OUTPUT
            echo "failed_tests=0" >> $GITHUB_OUTPUT
          fi

      - name: Extract Coverage Percentage
        id: coverage
        if: always()
        run: |
          if [ -f "./CoverageReport/Summary.txt" ]; then
            COVERAGE=$(grep "Line coverage:" ./CoverageReport/Summary.txt | grep -o '[0-9.]*%' | head -1)
            echo "coverage_percent=${COVERAGE:-0%}" >> $GITHUB_OUTPUT
          else
            echo "coverage_percent=0%" >> $GITHUB_OUTPUT
          fi
      # ================================================

      - name: CI completed successfully
        run: |
          echo "Continuous Integration feito com sucesso!"
          echo "Testes executados: ${{ steps.test-results.outputs.total_tests }}"
          echo "Testes aprovados: ${{ steps.test-results.outputs.passed_tests }}"
          echo "Cobertura de código: ${{ steps.coverage.outputs.coverage_percent }}"
          echo "Pronto para Continuous Delivery pipeline"

      - name: Send Discord notification - CI Success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "CI Concluído com Sucesso ✅",
                   "description": "Build e testes executados com sucesso!",
                   "color": 65280,
                   "fields": [
                     {
                       "name": "Branch",
                       "value": "${{ github.ref_name }}",
                       "inline": true
                     },
                     {
                       "name": "Testes",
                       "value": "✅ ${{ steps.test-results.outputs.passed_tests }}/${{ steps.test-results.outputs.total_tests }} aprovados",
                       "inline": true
                     },
                     {
                       "name": "Cobertura",
                       "value": "${{ steps.coverage.outputs.coverage_percent }}",
                       "inline": true
                     },
                     {
                       "name": "Próximo passo",
                       "value": "Iniciando processo de deploy...",
                       "inline": false
                     }
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord notification - CI Failed
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "CI Falhou ❌",
                   "description": "Erro durante build ou testes!",
                   "color": 16711680,
                   "fields": [
                     {
                       "name": "Branch",
                       "value": "${{ github.ref_name }}",
                       "inline": true
                     },
                     {
                       "name": "Commit",
                       "value": "`${{ github.sha }}`",
                       "inline": true
                     },
                     {
                       "name": "Autor",
                       "value": "${{ github.actor }}",
                       "inline": true
                     },
                     {
                       "name": "Testes",
                       "value": "${{ steps.test-results.outputs.failed_tests > 0 && format('❌ {0} falharam de {1}', steps.test-results.outputs.failed_tests, steps.test-results.outputs.total_tests) || '⚠️ Erro no build/testes' }}",
                       "inline": true
                     },
                     {
                       "name": "Ação",
                       "value": "Verifique os logs do GitHub Actions para mais detalhes",
                       "inline": false
                     }
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

  # Novo job específico para análise de qualidade (opcional)
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    needs: build-and-test
    if: always() && (success() || failure())

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: ./DownloadedResults

      - name: Install Code Analysis Tools
        run: |
          dotnet tool install -g dotnet-sonarscanner 2>/dev/null || echo "SonarScanner já instalado"
          dotnet tool install -g security-scan 2>/dev/null || echo "Security scanner não disponível"

      - name: Run Static Code Analysis
        run: |
          echo "Executando análise estática de código..."
          # Aqui você pode adicionar ferramentas como SonarQube, CodeQL, etc.
          dotnet build --configuration Release --verbosity minimal

      - name: Check Test Coverage Threshold
        run: |
          # Define o threshold mínimo de cobertura (exemplo: 80%)
          MINIMUM_COVERAGE=80
          COVERAGE_FILE="./DownloadedResults/CoverageReport/Summary.txt"
          
          if [ -f "$COVERAGE_FILE" ]; then
            CURRENT_COVERAGE=$(grep "Line coverage:" "$COVERAGE_FILE" | grep -o '[0-9.]*' | head -1)
            CURRENT_COVERAGE_INT=$(echo "$CURRENT_COVERAGE" | cut -d'.' -f1)
            
            echo "Cobertura atual: ${CURRENT_COVERAGE}%"
            echo "Cobertura mínima: ${MINIMUM_COVERAGE}%"
            
            if [ "$CURRENT_COVERAGE_INT" -lt "$MINIMUM_COVERAGE" ]; then
              echo "⚠️ Cobertura de código abaixo do mínimo exigido!"
              echo "coverage_warning=true" >> $GITHUB_ENV
            else
              echo "✅ Cobertura de código adequada!"
              echo "coverage_warning=false" >> $GITHUB_ENV
            fi
          fi

  build-docker-and-deploy:
    runs-on: ubuntu-latest
    name: Build Docker and Deploy
    needs: [build-and-test, code-quality]
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Send Discord notification - Docker build started
        if: always()
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "Docker Build Iniciado 🐳",
                   "description": "Iniciando construção da imagem Docker",
                   "color": 3447003,
                   "fields": [
                     {
                       "name": "Branch",
                       "value": "${{ github.ref_name }}",
                       "inline": true
                     },
                     {
                       "name": "Ambiente",
                       "value": "${{ github.ref == 'refs/heads/master' && 'Produção' || 'Teste' }}",
                       "inline": true
                     }
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Build Docker image for testing
        if: github.ref != 'refs/heads/master'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.IMAGE_NAME || 'test-app' }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        if: github.ref != 'refs/heads/master'
        run: |
          echo "Testing Docker image..."
          echo "Docker build successful - ready for deployment!"
          echo "Image built: ${{ env.IMAGE_NAME || 'test-app' }}:test"

      - name: Login to Docker Registry
        if: github.ref == 'refs/heads/master' && env.REGISTRY_URL != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image to registry
        if: github.ref == 'refs/heads/master' && env.REGISTRY_URL != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: CD completed successfully
        run: |
          echo "Continuous Delivery feito com sucesso!"
          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            echo "Deployed to production!"
          else
            echo "Ready for deployment - Docker image tested successfully!"
          fi

      - name: Send Discord notification - Deploy Success
        if: success()
        run: |
          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            DEPLOY_TYPE="Deploy em Produção Concluído 🚀"
            DEPLOY_MSG="Aplicação foi implantada em produção com sucesso!"
            DEPLOY_COLOR=65280
          else
            DEPLOY_TYPE="Teste Docker Concluído ✅"
            DEPLOY_MSG="Imagem Docker testada com sucesso e pronta para deploy!"
            DEPLOY_COLOR=16776960
          fi
          
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "'"$DEPLOY_TYPE"'",
                   "description": "'"$DEPLOY_MSG"'",
                   "color": '"$DEPLOY_COLOR"',
                   "fields": [
                     {
                       "name": "Branch",
                       "value": "${{ github.ref_name }}",
                       "inline": true
                     },
                     {
                       "name": "Imagem",
                       "value": "`${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}`",
                       "inline": true
                     },
                     {
                       "name": "Status",
                       "value": "Sucesso ✅",
                       "inline": true
                     }
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord notification - Deploy Failed
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "Deploy Falhou ❌",
                   "description": "Erro durante o processo de deploy!",
                   "color": 16711680,
                   "fields": [
                     {
                       "name": "Branch",
                       "value": "${{ github.ref_name }}",
                       "inline": true
                     },
                     {
                       "name": "Ambiente",
                       "value": "${{ github.ref == 'refs/heads/master' && 'Produção' || 'Teste' }}",
                       "inline": true
                     },
                     {
                       "name": "Ação",
                       "value": "Verifique os logs do GitHub Actions para mais detalhes",
                       "inline": false
                     }
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}